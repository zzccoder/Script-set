<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0062)http://www.cnblogs.com/sishahu/archive/2011/11/28/2266333.html -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><HTML><HEAD><META 
content="IE=9.0000" http-equiv="X-UA-Compatible">

<META content="text/html; charset=utf-8" http-equiv="Content-Type">
<TITLE>SQL索引使用初步，（转） - 紫砂壶 - 博客园</TITLE><LINK rel="stylesheet" type="text/css" 
href="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/common.css"><LINK id="MainCss" 
rel="stylesheet" type="text/css" href="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/style.css">
<LINK rel="stylesheet" type="text/css" href="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/brown.css">
<LINK rel="stylesheet" type="text/css" href="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/common2.css">
<LINK rel="stylesheet" type="text/css" href="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/shStyle.css">
<LINK title="RSS" rel="alternate" type="application/rss+xml" href="http://www.cnblogs.com/sishahu/rss">
<LINK title="RSD" rel="EditURI" type="application/rsd+xml" href="http://www.cnblogs.com/sishahu/rsd.xml">
<LINK rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.cnblogs.com/sishahu/wlwmanifest.xml">
<SCRIPT type="text/javascript" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/jquery.js"></SCRIPT>

<SCRIPT type="text/javascript">
var currentBlogApp = 'sishahu';
</SCRIPT>

<SCRIPT type="text/javascript" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/common.js"></SCRIPT>

<SCRIPT type="text/javascript" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/json2.js"></SCRIPT>

<SCRIPT type="text/javascript" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/syntaxHighlighter.js"></SCRIPT>

<META name="GENERATOR" content="MSHTML 9.00.8112.16450"></HEAD>
<BODY><A name="top"></A>
<DIV id="top">
<H1><A id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/sishahu/">紫砂壶</A></H1>
<P id="tagline">努力打造自己的精彩人生！！！</P></DIV>
<DIV id="leftmenu">
<H3>导航</H3>
<UL>
  <LI><A id="MyLinks1_HomeLink" href="http://www.cnblogs.com/">博客园</A>
  <LI><A id="MyLinks1_MyHomeLink" 
  href="http://www.cnblogs.com/sishahu/">首页</A></LI>
  <LI><A id="MyLinks1_NewPostLink" href="http://www.cnblogs.com/sishahu/admin/EditPosts.aspx?opt=1" 
  rel="nofollow">新随笔</A></LI>
  <LI><A accessKey="9" id="MyLinks1_ContactLink" href="http://space.cnblogs.com/msg/send/%e7%b4%ab%e7%a0%82%e5%a3%b6" 
  rel="nofollow">联系</A>
  <LI><A id="MyLinks1_Syndication" 
  href="http://www.cnblogs.com/sishahu/rss">订阅</A><A id="MyLinks1_XMLLink" href="http://www.cnblogs.com/sishahu/rss"><IMG 
  alt="订阅" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/xml.gif"></A>
  <LI><A id="MyLinks1_Admin" href="http://www.cnblogs.com/sishahu/admin/EditPosts.aspx" 
  rel="nofollow">管理</A></LI></UL>
<DIV style="display: none;" id="blog-calendar-block">
<DIV id="blog-calendar"></DIV></DIV>
<H3>统计</H3>
<UL>
  <LI>		随笔 -		67	
  <LI>文章 -		0	
  <LI>评论 -		9	
  <LI>引用 -		0	</LI></UL>
<H3>公告</H3>
<DIV id="blog-news"></DIV>
<DIV id="blog-sidecolumn"></DIV></DIV>
<DIV id="main">
<DIV class="post">
<H2><A id="cb_post_title_url" href="http://www.cnblogs.com/sishahu/archive/2011/11/28/2266333.html">SQL索引使用初步，（转）</A></H2>
<DIV id="cnblogs_post_body">
<H3><STRONG><SPAN style="color: rgb(255, 128, 0);">简介</SPAN></STRONG></H3>
<HR>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp; 在SQL Server中，索引是一种增强式的存在，这意味着，即使没有索引，SQL 
Server仍然可以实现应有的功能。但索引可以在大多数情况下大大提升查询性能，在OLAP中尤其明显.要完全理解索引的概念，需要了解大量原理性的知识，包括B树，堆，数据库页，区，填充因子，碎片,文件组等等一系列相关知识，这些知识写一本小书也不为过。所以本文并不会深入讨论这些主题。</P>
<P>&nbsp;</P>
<H3><STRONG><SPAN style="color: rgb(255, 128, 0);">索引是什么</SPAN></STRONG></H3>
<HR>

<P>&nbsp;&nbsp;&nbsp; 索引是对数据库表中一列或多列的值进行排序的一种<SPAN style="color: rgb(0, 0, 255);">结构</SPAN>，使用索引可快速访问数据库表中的特定信息。</P>
<P>&nbsp;&nbsp;&nbsp; 精简来说，索引是一种结构.在SQL 
Server中，索引和表（这里指的是加了聚集索引的表）的存储结构是一样的,都是B树，B树是一种用于查找的平衡多叉树.理解B树的概念如下图:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221217483886.jpg"><IMG 
title="B-" border="0" alt="B-" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221217494923.jpg" 
width="628" height="272"></A></P>
<P>&nbsp;&nbsp;&nbsp; 理解为什么使用B树作为索引和表（有聚集索引）的结构，首先需要理解SQL Server存储数据的原理.</P>
<P>&nbsp;&nbsp;&nbsp; 在SQL 
SERVER中，存储的单位最小是页(PAGE),页是不可再分的。就像细胞是生物学中不可再分的，或是原子是化学中不可再分的最小单位一样.这意味着,SQL 
SERVER对于页的读取，要么整个读取，要么完全不读取，没有折中.</P>
<P>&nbsp;&nbsp;&nbsp; 
在数据库检索来说，对于磁盘IO扫描是最消耗时间的.因为磁盘扫描涉及很多物理特性，这些是相当消耗时间的。所以B树设计的初衷是为了减少对于磁盘的扫描次数。如果一个表或索引没有使用B树（对于没有聚集索引的表是使用堆heap存储),那么查找一个数据，需要在整个表包含的数据库页中全盘扫描。这无疑会大大加重IO负担.而在SQL 
SERVER中使用B树进行存储，则仅仅需要将B树的根节点存入内存，经过几次查找后就可以找到存放所需数据的被叶子节点包含的页！进而避免的全盘扫描从而提高了性能.</P>
<P>&nbsp;&nbsp;&nbsp; 下面，通过一个例子来证明：</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 在SQL 
SERVER中，表上如果没有建立聚集索引，则是按照堆（HEAP）存放的，假设我有这样一张表:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221217514216.png"><IMG 
title="1" border="0" alt="1" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221217524697.png" 
width="651" height="435"></A></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 
现在这张表上没有任何索引，也就是以堆存放，我通过在其上加上聚集索引（以B树存放）来展现对IO的减少:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221217543466.png"><IMG 
title="2" border="0" alt="2" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221217569204.png" 
width="835" height="440"></A></P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<H3><STRONG><SPAN 
style="color: rgb(255, 128, 0);">理解聚集和聚集索引</SPAN></STRONG></H3>
<HR>

<P>&nbsp;&nbsp;&nbsp; 在SQL SERVER中，最主要的两类索引是聚集索引和非聚集索引。可以看到，这两个分类是围绕<SPAN style="color: rgb(0, 0, 255);">聚集</SPAN>这个关键字进行的.那么首先要理解什么是聚集.</P>
<P>&nbsp;&nbsp;&nbsp; 聚集在索引中的定义:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;<SPAN 
style="color: rgb(255, 0, 0);">为了提高某个属性(或属性组)的查询速度，把这个或这些属性(称为聚集码)上具有相同值的元组集中存放在连续的物理块称为聚集。</SPAN></P>
<P>&nbsp;&nbsp;&nbsp; 简单来说，聚集索引就是:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/20111222121757732.png"><IMG 
title="3" border="0" alt="3" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221217585291.png" 
width="412" height="198"></A></P>
<P>&nbsp;&nbsp;&nbsp; 在SQL 
SERVER中，聚集的作用就是将某一列（或是多列）的物理顺序改变为和逻辑顺序相一致,比如，我从adventureworks数据库的employee中抽取5条数据:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221218103689.png"><IMG 
title="4" border="0" alt="4" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221218115217.png" 
width="776" height="294"></A></P>
<P>&nbsp;&nbsp;&nbsp; 当我在ContactID上建立聚集索引时，再次查询:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221218121478.png"><IMG 
title="5" border="0" alt="5" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221218148578.png" 
width="769" height="274"></A></P>
<P>&nbsp;&nbsp;&nbsp; 在SQL SERVER中，聚集索引的存储是以B树存储，B树的叶子直接存储聚集索引的数据:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221218159234.gif"><IMG 
title="grid.ai" border="0" alt="grid.ai" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221218166858.gif" 
width="448" height="480"></A></P>
<P>&nbsp;&nbsp;&nbsp; 因为聚集索引改变的是其所在表的物理存储顺序，所以每个表只能有一个聚集索引.</P>
<P>&nbsp;</P>
<H3><STRONG><SPAN style="color: rgb(255, 128, 0);">非聚集索引</SPAN></STRONG></H3>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 
因为每个表只能有一个聚集索引，如果我们对一个表的查询不仅仅限于在聚集索引上的字段。我们又对聚集索引列之外还有索引的要求，那么就需要非聚集索引了.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 
非聚集索引，本质上来说也是聚集索引的一种.非聚集索引并不改变其所在表的物理结构，而是额外生成一个聚集索引的B树结构，但叶子节点是对于其所在表的引用,这个引用分为两种，如果其所在表上没有聚集索引，则引用行号。如果其所在表上已经有了聚集索引，则引用聚集索引的页.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 一个简单的非聚集索引概念如下:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221218172006.png"><IMG 
title="6" border="0" alt="6" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221218193567.png" 
width="862" height="344"></A></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 
可以看到，非聚集索引需要额外的空间进行存储，按照被索引列进行聚集索引，并在B树的叶子节点包含指向非聚集索引所在表的指针.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; MSDN中，对于非聚集索引描述图是:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221218205094.gif"><IMG 
title="grid.ai" border="0" alt="grid.ai" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221218216306.gif" 
width="518" height="474"></A></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 
可以看到，非聚集索引也是一个B树结构，与聚集索引不同的是，B树的叶子节点存的是指向堆或聚集索引的指针.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 
通过非聚集索引的原理可以看出，如果其所在表的物理结构改变后，比如加上或是删除聚集索引，那么所有非聚集索引都需要被重建，这个对于性能的损耗是相当大的。所以最好要先建立聚集索引，再建立对应的非聚集索引.</P>
<P>&nbsp;</P>
<H3><STRONG><SPAN style="color: rgb(255, 128, 0);">聚集索引 VS 
非聚集索引</SPAN></STRONG></H3>
<HR>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
前面通过对于聚集索引和非聚集索引的原理解释.我们不难发现，大多数情况下，聚集索引的速度比非聚集索引要略快一些.因为聚集索引的B树叶子节点直接存储数据，而聚集索引还需要额外通过叶子节点的指针找到数据.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
还有，对于大量连续数据查找，非聚集索引十分乏力，因为非聚集索引需要在非聚集索引的B树中找到每一行的指针，再去其所在表上找数据，性能因此会大打折扣.有时甚至不如不加非聚集索引.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
因此，大多数情况下聚集索引都要快于非聚集索引。但聚集索引只能有一个，因此选对聚集索引所施加的列对于查询性能提升至关紧要.</P>
<P>&nbsp;</P>
<H3><STRONG><SPAN style="color: rgb(255, 128, 0);">索引的使用</SPAN></STRONG></H3>
<HR>

<P>&nbsp;&nbsp;&nbsp;&nbsp; 索引的使用并不需要显式使用，建立索引后查询分析器会自动找出最短路径使用索引.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 
但是有这种情况.当随着数据量的增长，产生了索引碎片后，很多存储的数据进行了不适当的跨页，会造成碎片(关于跨页和碎片以及填充因子的介绍，我会在后续文章中说到)我们需要重新建立索引以加快性能:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 比如前面的test_tb2上建立的一个聚集索引和非聚集索引，可以通过DMV语句查询其索引的情况:</P>
<DIV><PRE><A href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">SELECT</A> index_type_desc,alloc_unit_type_desc,avg_fragmentation_in_percent,fragment_count,avg_fragment_size_in_pages,page_count,record_count,avg_page_space_used_in_percent
<A href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">FROM</A> sys.dm_db_index_physical_stats(DB_ID('<SPAN>AdventureWorks</SPAN>'),OBJECT_ID('<SPAN>test_tb2</SPAN>'),<A href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NULL&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">NULL</A>,<A href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NULL&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">NULL</A>,'<SPAN>Sampled</SPAN>')</PRE></DIV>
<P>&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221218221455.png"><IMG 
title="7" border="0" alt="7" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221218236570.png" 
width="862" height="232"></A></P>
<P>&nbsp;&nbsp;&nbsp; 我们可以通过重建索引来提高速度:</P>
<DIV><PRE><A href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=ALTER&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">ALTER</A> <A href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=INDEX&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">INDEX</A> idx_text_tb2_EmployeeID <A href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=ON&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">ON</A> test_tb2 REBUILD</PRE>
</DIV>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp; 还有一种情况是，当随着表数据量的增大，有时候需要更新表上的统计信息，让查询分析器根据这些信息选择路径，使用:</P>
<DIV><PRE><A href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=UPDATE&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">UPDATE</A> <A href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=STATISTICS&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">STATISTICS</A> 表名</PRE>
</DIV>
<P>&nbsp;&nbsp; 那么什么时候知道需要更新这些统计信息呢，就是当执行计划中估计行数和实际表的行数有出入时:</P>
<P>&nbsp;&nbsp;&nbsp;<A href="http://images.cnblogs.com/cnblogs_com/CareySon/201112/201112221218257574.png"><IMG 
title="8" border="0" alt="8" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/201112221218263803.png" 
width="514" height="403"></A></P>
<P>&nbsp;&nbsp;</P>
<H3><STRONG><SPAN style="color: rgb(255, 128, 0);">使用索引的代价</SPAN></STRONG></H3>
<HR>

<P>&nbsp;&nbsp;&nbsp; 我最喜欢的一句话是”everything has 
price”。我们通过索引获得的任何性能提升并不是不需要付出代价。这个代价来自几方面.</P>
<P>&nbsp;&nbsp;&nbsp; 
1.通过聚集索引的原理我们知道，当表建立索引后，就以B树来存储数据.所以当对其进行更新插入删除时，就需要页在物理上的移动以调整B树.因此当更新插入删除数据时，会带来性能的下降。而对于非聚集索引，当更新表后，非聚集索引也需要进行更新，相当于多更新了N（N=非聚集索引数量）个表。因此也下降了性能.</P>
<P>&nbsp;&nbsp;&nbsp; 2.通过上面对非聚集索引原理的介绍，可以看到，非聚集索引需要额外的磁盘空间。</P>
<P>&nbsp;&nbsp;&nbsp; 3.前文提过，不恰当的非聚集索引反而会降低性能.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;<SPAN 
style="color: rgb(0, 0, 255);">所以使用索引需要根据实际情况进行权衡.通常我都会将非聚集索引全部放到另外一个独立硬盘上，这样可以分散IO，从而使查询并行.</SPAN></P>
<P>&nbsp;</P>
<H3>&nbsp;</H3>
<H3><STRONG><SPAN style="color: rgb(255, 128, 0);">总结</SPAN></STRONG></H3>
<HR>

<P>&nbsp;&nbsp;&nbsp;&nbsp; 本文从索引的原理和概念对SQL 
SERVER中索引进行介绍，索引是一个很强大的工具，也是一把双刃剑.对于恰当使用索引需要对索引的原理以及数据库存储的相关原理进行系统的学习.</P></DIV>
<DIV id="MySignature"></DIV>
<SCRIPT type="text/javascript">
var isLogined = false;
var cb_blogId = 81475;
var cb_entryId = 2266333;
var cb_blogApp = currentBlogApp;
var cb_blogUserGuid = "82d80870-a3bf-df11-ac81-842b2b196315";
var cb_entryCreatedDate = '2011/11/28 15:59:00';
var enableGoogleAd = true;
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
</SCRIPT>

<DIV id="blog_post_info_block">
<DIV id="blog_post_info"></DIV>
<DIV class="clear"></DIV>
<DIV id="post_next_prev"></DIV></DIV>
<SCRIPT type="text/javascript">
    //SyntaxHighlighter.config.strings.expandSource = '<span><img src="http://static.cnblogs.com/images/expand-code.gif" alt="" class="expand-code-icon"/>View Code</span>';
    $(function () {             
        fixPostBodyFormat();
        loadAdUnderPost();
        loadBlogSignature();
        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);        
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);        
    });
</SCRIPT>

<P class="postfoot">			posted on <SPAN id="post-date">2011-11-28 15:59</SPAN> <A 
href="http://www.cnblogs.com/sishahu/">紫砂壶</A> 阅读(918) 评论(<SPAN id="post-comment-count">0</SPAN>) 
 <A href="http://www.cnblogs.com/sishahu/admin/EditPosts.aspx?postid=2266333" 
rel="nofollow">编辑</A> <A onclick="AddToWz(2266333);return false;" href="http://www.cnblogs.com/sishahu/archive/2011/11/28/2266333.html#">收藏</A></P></DIV><IMG 
alt="" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/2266333.jpg" width="1" 
height="1">
<DIV id="blog-comments-placeholder"></DIV>
<SCRIPT type="text/javascript">var commentManager = new blogCommentManager();commentManager.loadComments();</SCRIPT>

<DIV id="comment_form" class="commentform">
<DIV id="divCommentShow"></DIV>
<DIV id="comment_nav"><SPAN id="span_refresh_tips"></SPAN><A onclick="return RefreshPage();" 
href="http://www.cnblogs.com/sishahu/archive/2011/11/28/2266333.html#">刷新页面</A><A 
href="http://www.cnblogs.com/sishahu/archive/2011/11/28/2266333.html#top">返回顶部</A></DIV>
<DIV id="comment_form_container">（评论功能已被博主禁用）</DIV>
<DIV id="ad_text_under_commentbox" class="ad_text_commentbox"></DIV>
<DIV id="site_nav_under"><A title="程序员的网上家园" href="http://www.cnblogs.com/" 
target="_blank">博客园首页</A><A title="程序员问答社区" href="http://q.cnblogs.com/" target="_blank">博问</A><A 
title="IT新闻" href="http://news.cnblogs.com/" target="_blank">新闻</A><A href="http://home.cnblogs.com/ing/" 
target="_blank">闪存</A><A href="http://job.cnblogs.com/" 
target="_blank">程序员招聘</A><A href="http://kb.cnblogs.com/" 
target="_blank">知识库</A></DIV>
<DIV id="ad_under_post_holder"></DIV>
<DIV id="HistoryToday" class="c_ad_block"></DIV></DIV></DIV>
<P id="footer">	Powered by: 	<BR><A style="font-family: Verdana; font-size: 12px;" 
id="Footer1_Hyperlink3" href="http://www.cnblogs.com/" 
name="Hyperlink1">博客园</A><BR>Copyright © 紫砂壶</P>
<SCRIPT type="text/javascript" src="SQL索引使用初步，（转）%20-%20紫砂壶%20-%20博客园_files/google-analytics.js"></SCRIPT>
</BODY></HTML>
