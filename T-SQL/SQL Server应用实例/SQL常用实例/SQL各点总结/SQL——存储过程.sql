/*

存储过程的优势
(1) 能实现模块化程序设计。存储过程是根据实际功能的需要创建的一个程序模块，并被存储在数据库中。
    以后用户要完成该功能，只要在程序中直接调用该存储过程即可，而无需再编写重复的程序代码。
    存储过程可由数据库编程方面的专门人员创建，并可独立于程序源代码而进行修改和扩展。
    
(2) 使用存储过程可以提高执行效率。当客户程序需要访问服务器上的数据时，一般要经过5个步骤：
 ● 查询语句被发送到服务器；
 ● 服务器编译T-SQL语句；
 ● 优化产生查询执行计划；
 ● 数据库引擎执行查询；
 ● 执行结果发回客户程序。
 
	如果执行存储在客户端本地的T-SQL程序，那么每次执行该程序时，
	对于程序中的每一条语句都要经过以上5个步骤。而存储过程在创建时就被编译和优化
	，当存储过程第一次被执行时，SQL Server为其产生查询计划并将其保存在内存中，
	这样以后在调用该存储过程时就不必再进行编译，
	即以上5个步骤中的第2步和第3步就被省略了，这能大大改善系统的性能。
(3) 减少网络流量。一个需要数百行T-SQL代码的操作，如果将其创建成存储过程，
   那么使用一条调用存储过程的语句就可完成该操作。这样就可避免在网络上发送数百行代码，从而减少了网络负荷。
(4) 可作为安全机制使用。管理员可以不授予用户访问存储过程中涉及的表的权限，
     而只授予执行存储过程的权限。这样，既可以保证用户通过存储过程操纵数据库中的数据，
     又可以保证用户不能直接访问存储过程中涉及的表。用户通过存储过程来访问表，所能进行的操作是有限制的，
     从而保证了表中数据的安全性。
*/


create procedure User_T_update      ---创建存储过程
@ID int,                             ---添加需的参数
@u_name nvarchar,
@u_pwd nvarchar
as
begin
	update [user] set u_name=@u_name,u_pwd=@u_pwd where u_id=@ID;      ---存储过程的主体
end
	
Go

exec User_T_update             ----执行存储过程
@ID=3,                          ----给存储过程赋值
@u_name='1',
@u_pwd='2'
GO
delete User_T_update              ----删除存储过程