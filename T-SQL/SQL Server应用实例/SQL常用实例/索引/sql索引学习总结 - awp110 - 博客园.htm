<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0065)http://www.cnblogs.com/aaa6818162/archive/2009/11/03/1594964.html -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><HTML 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><META content="IE=9.0000" 
http-equiv="X-UA-Compatible">

<META content="text/html; charset=utf-8" http-equiv="Content-Type">
<TITLE>sql索引学习总结 - awp110 - 博客园</TITLE><LINK rel="stylesheet" type="text/css" 
href="sql索引学习总结%20-%20awp110%20-%20博客园_files/common.css"><LINK id="MainCss" rel="stylesheet" 
type="text/css" href="sql索引学习总结%20-%20awp110%20-%20博客园_files/style.css"><LINK 
rel="stylesheet" type="text/css" href="sql索引学习总结%20-%20awp110%20-%20博客园_files/common2.css">
<LINK rel="stylesheet" type="text/css" href="sql索引学习总结%20-%20awp110%20-%20博客园_files/shStyle.css">
<LINK title="RSS" rel="alternate" type="application/rss+xml" href="http://www.cnblogs.com/aaa6818162/rss">
<LINK title="RSD" rel="EditURI" type="application/rsd+xml" href="http://www.cnblogs.com/aaa6818162/rsd.xml">
<LINK rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.cnblogs.com/aaa6818162/wlwmanifest.xml">
<SCRIPT type="text/javascript" src="sql索引学习总结%20-%20awp110%20-%20博客园_files/jquery.js"></SCRIPT>

<SCRIPT type="text/javascript">
var currentBlogApp = 'aaa6818162';
</SCRIPT>

<SCRIPT type="text/javascript" src="sql索引学习总结%20-%20awp110%20-%20博客园_files/common.js"></SCRIPT>

<SCRIPT type="text/javascript" src="sql索引学习总结%20-%20awp110%20-%20博客园_files/json2.js"></SCRIPT>

<SCRIPT type="text/javascript" src="sql索引学习总结%20-%20awp110%20-%20博客园_files/syntaxHighlighter.js"></SCRIPT>

<META name="GENERATOR" content="MSHTML 9.00.8112.16450"></HEAD>
<BODY><A name="top"></A><!--done-->
<DIV id="home">
<DIV id="header">
<DIV id="blogTitle"><A id="lnkBlogLogo" href="http://www.cnblogs.com/aaa6818162/"><IMG 
id="blogLogo" alt="返回主页" 
src="sql索引学习总结%20-%20awp110%20-%20博客园_files/logo.gif"></A><!--done-->
<H1><A id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/aaa6818162/">2012 
gogogo！！！！！！！！！</A></H1>
<H2></H2></DIV><!--end: blogTitle 博客的标题和副标题 -->
<DIV id="navigator">
<UL id="navList">
  <LI><A id="MyLinks1_HomeLink" class="menu" 
  href="http://www.cnblogs.com/">博客园</A></LI>
  <LI><A id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/aaa6818162/">首页</A></LI>
  <LI><A href="http://news.cnblogs.com/">新闻</A></LI>
  <LI><A id="MyLinks1_NewPostLink" class="menu" href="http://www.cnblogs.com/aaa6818162/admin/EditPosts.aspx?opt=1" 
  rel="nofollow">新随笔</A></LI>
  <LI><A accessKey="9" id="MyLinks1_ContactLink" class="menu" href="http://space.cnblogs.com/msg/send/awp110" 
  rel="nofollow">联系</A></LI>
  <LI><A id="MyLinks1_Admin" class="menu" href="http://www.cnblogs.com/aaa6818162/admin/EditPosts.aspx" 
  rel="nofollow">管理</A></LI>
  <LI><A id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/aaa6818162/rss">订阅</A><A 
  id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/aaa6818162/rss"><IMG 
  alt="订阅" src="sql索引学习总结%20-%20awp110%20-%20博客园_files/rss.gif"></A></LI></UL>
<DIV class="blogStats"><!--done-->随笔- 1071&nbsp;文章- 0&nbsp;评论- 43&nbsp;			
		</DIV><!--end: blogStats --></DIV><!--end: navigator 博客导航栏 --></DIV><!--end: header 头部 -->
<DIV id="main">
<DIV id="mainContent">
<DIV class="forFlow"><!--done-->
<DIV id="topics">
<DIV class="post">
<H1 class="postTitle"><A id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/aaa6818162/archive/2009/11/03/1594964.html">sql索引学习总结</A></H1>
<DIV class="clear"></DIV>
<DIV class="postBody">
<DIV id="cnblogs_post_body">
<P><STRONG>一。深入浅出理解索引结构</STRONG> （只能建立一个<SPAN 
style="color: red;">聚集索引）因为数据的物理存放地址是根据聚集索引来的&nbsp;&nbsp;&nbsp; 
所以肯定就只能由一个聚集索引&nbsp;&nbsp; </SPAN></P>
<P>SQL SERVER提供了两种索引：<SPAN style="color: red;">聚集索引</SPAN>（clustered 
index，也称聚类索引、簇集索引）和<SPAN style="color: red;">非聚集索引</SPAN>（nonclustered 
index，也称非聚类索引、非簇集索引）。</P>
<P>其实，我们的汉语字典的正文本身就是一个聚集索引。比如，我们要查“安”字，就会很自然地翻开字典的前几页，因为“安”的拼音是“an”，而按照拼音排序汉字的字典是以英文字母“a”开头并以“z”结尾的，那么“安”字就自然地排在字典的前部。如果您翻完了所有以“a”开头的部分仍然找不到这个字，那么就说明您的字典中没有这个字；同样的，如果查“张”字，那您也会将您的字典翻到最后部分，因为“张”的拼音是“zhang”。也就是说，字典的正文部分本身就是一个目录，您不需要再去查其他目录来找到您需要找的内容。<SPAN 
style="color: red;">我们把这种正文内容本身就是一种按照一定规则排列的目录称为“聚集索引”。 
</SPAN><BR>　　如果您认识某个字，您可以快速地从自动中查到这个字。但您也可能会遇到您不认识的字，不知道它的发音，这时候，您就不能按照刚才的方法找到您要查的字，而需要去根据“偏旁部首”查到您要找的字，然后根据这个字后的页码直接翻到某页来找到您要找的字。但您结合“部首目录”和“检字表”而查到的字的排序并不是真正的正文的排序方法，比如您查“张”字，我们可以看到在查部首之后的检字表中“张”的页码是672页，检字表中“张”的上面是“驰”字，但页码却是63页，“张”的下面是“弩”字，页面是390页。很显然，这些字并不是真正的分别位于“张”字的上下方，现在您看到的连续的“驰、张、弩”三字实际上就是他们在非聚集索引中的排序，是字典正文中的字在非聚集索引中的映射。我们可以通过这种方式来找到您所需要的字，但它需要两个过程，先找到目录中的结果，然后再翻到您所需要的页码。<SPAN 
style="color: red;">我们把这种目录纯粹是目录，正文纯粹是正文的排序方式称为“非聚集索引”。</SPAN></P>
<P><SPAN style="color: red;">&nbsp;&nbsp;&nbsp;&nbsp; 简单来说 
默认建立的排序方式那个‘字段’即已建立了聚集索引（如：字典的拼音，数据库中的主键）。有别于<FONT 
color="#ff0000">聚集索引</FONT>建立的排序（所根据的字段即已经建立了非聚集索引）</SPAN></P>
<P><SPAN style="color: red;"></SPAN><STRONG>二、何时使用聚集索引或非聚集索引</STRONG> 
<BR><BR>下面的表总结了何时使用聚集索引或非聚集索引（很重要）： 
<TABLE style="color: rgb(0, 0, 0); border-collapse: collapse;" id="AutoNumber1" 
border="1" cellSpacing="0" cellPadding="0" width="62%" height="107">
  <TBODY>
  <TR>
    <TD height="23" width="40%" align="center">动作描述</TD>
    <TD height="23" width="29%" align="center">使用聚集索引</TD>
    <TD height="23" width="31%" align="center">使用非聚集索引</TD></TR>
  <TR>
    <TD height="20" width="40%">列经常被分组排序</TD>
    <TD height="20" width="29%">应</TD>
    <TD height="20" width="31%">应</TD></TR>
  <TR>
    <TD height="20" width="40%">返回某范围内的数据</TD>
    <TD height="20" width="29%">应</TD>
    <TD height="20" width="31%">不应</TD></TR>
  <TR>
    <TD height="20" width="40%">一个或极少不同值</TD>
    <TD height="20" width="29%">不应</TD>
    <TD height="20" width="31%">不应</TD></TR>
  <TR>
    <TD height="20" width="40%">小数目的不同值</TD>
    <TD height="20" width="29%">应</TD>
    <TD height="20" width="31%">不应</TD></TR>
  <TR>
    <TD height="20" width="40%">大数目的不同值</TD>
    <TD height="20" width="29%">不应</TD>
    <TD height="20" width="31%">应</TD></TR>
  <TR>
    <TD height="20" width="40%">频繁更新的列</TD>
    <TD height="20" width="29%">不应</TD>
    <TD height="20" width="31%">应</TD></TR>
  <TR>
    <TD height="20" width="40%">外键列</TD>
    <TD height="20" width="29%">应</TD>
    <TD height="20" width="31%">应</TD></TR>
  <TR>
    <TD height="20" width="40%">主键列</TD>
    <TD height="20" width="29%">应</TD>
    <TD height="20" width="31%">应</TD></TR>
  <TR>
    <TD height="20" width="40%">频繁修改索引列</TD>
    <TD height="20" width="29%">不应</TD>
    <TD height="20" width="31%">应</TD></TR></TBODY></TABLE>
<P></P>
<P>　　事实上，我们可以通过前面聚集索引和非聚集索引的定义的例子来理解上表。如：返回某范围内的数据一项。比如您的某个表有一个时间列，恰好您把聚合索引建立在了该列，这时您查询2004年1月1日至2004年10月1日之间的全部数据时，这个速度就将是很快的，因为您的这本字典正文是按日期进行排序的，聚类索引只需要找到要检索的所有数据中的开头和结尾数据即可；而不像非聚集索引，必须先查到目录中查到每一项数据对应的页码，然后再根据页码查到具体内容。 
</P>
<P>有些书籍会提到，使用<FONT size="2"><SPAN lang="zh-tw" 
xml:lang="zh-tw">「</SPAN>LIKE、%<SPAN lang="zh-tw" 
xml:lang="zh-tw">」</SPAN>做模糊查询时，即使您已替某个字段建立索引 (如下方代码的 CustomerID 
字段)，但以常量字符开头才会使用到索引，若以万用字符 (%) 开头则不会使用索引，如下所示：</FONT> </P>
<P><FONT style="font-size: 16px;">&nbsp;<WBR></FONT></P>
<P>
<TABLE style="width: 100%;" id="table39" border="1" cellSpacing="1" cellPadding="1">
  <TBODY>
  <TR>
    <TD><SPAN style="font-family: Verdana; font-size: x-small;"><SPAN style="font-family: verdana,geneva;"><SPAN 
      style="font-size: small;"><SPAN style="font-size: x-small;"><FONT style="font-size: 16px;">USE 
      Northwind;<BR>GO<BR>SELECT * FROM Orders WHERE CustomerID LIKE 
      '</FONT><FONT size="2"><FONT style="font-size: 16px;"><SPAN style="color: rgb(255, 0, 0);">D%</SPAN>';&nbsp;<WBR>&nbsp;<WBR>&nbsp;<WBR> 
      --使用索引<BR>SELECT * FROM Orders WHERE CustomerID LIKE '<SPAN style="color: rgb(255, 0, 0);">%D</SPAN>';&nbsp;<WBR>&nbsp;<WBR>&nbsp;<WBR> 
      --不使用索引</FONT></FONT></SPAN></SPAN></SPAN></SPAN></TD></TR></TBODY></TABLE>
<P></P>
<P><FONT style="font-size: 16px;">&nbsp;<WBR></FONT></P>
<P><SPAN style="font-family: Verdana; font-size: x-small;"><SPAN style="font-family: verdana,geneva;"><SPAN 
style="font-size: small;"><SPAN style="font-size: x-small;"><FONT size="2"><FONT 
style="font-size: 16px;"><SPAN lang="zh-tw" xml:lang="zh-tw">在 SQL Server 
2005</SPAN> 执行完成后按 Ctrl + L，可检阅如下图的「执行计划」。<BR><BR><IMG alt="" src="sql索引学习总结%20-%20awp110%20-%20博客园_files/2008102700005536.jpg"> 
<BR>图 1　可看出「查询最佳化程序」有使用到索引做搜寻<BR><BR><IMG alt="" src="sql索引学习总结%20-%20awp110%20-%20博客园_files/2008102700014428.jpg"> 
<BR>图 2　在此的<SPAN lang="zh-tw" xml:lang="zh-tw">「</SPAN>集簇索引<SPAN lang="zh-tw" 
xml:lang="zh-tw">」</SPAN>扫描，并未直接使用索引，<SPAN lang="zh-tw" 
xml:lang="zh-tw">性</SPAN>能上几乎只等于扫描整个数据表</FONT></FONT></SPAN></SPAN></SPAN></SPAN></P>
<P><SPAN style="font-family: Verdana; font-size: x-small;"><SPAN style="font-family: verdana,geneva;"><SPAN 
style="font-size: small;"><SPAN style="font-size: x-small;"><FONT style="font-size: 16px;">但经版工反复测试，这种语法是否会使用到索引，抑或会逐笔扫描，并非绝对的。仍要看所下的查询关键词，以及字段内所存储的数据内容而定。但对于存储数据笔数庞大的数据表，最好还是少用 
LIKE 做模糊查询。</FONT></SPAN></SPAN></SPAN></SPAN></P>
<P><BR><BR><STRONG>三、结合实际，谈索引使用的误区</STRONG> 
<BR><BR>　　理论的目的是应用。虽然我们刚才列出了何时应使用聚集索引或非聚集索引，但在实践中以上规则却很容易被忽视或不能根据实际情况进行综合分析。下面我们将根据在实践中遇到的实际问题来谈一下索引使用的误区，以便于大家掌握索引建立的方法。 
<BR><BR><SPAN style="color: red;">1、主键就是聚集索引 
（错）</SPAN><BR>　　这种想法笔者认为是极端错误的，是对聚集索引的一种浪费。虽然SQL SERVER默认是在主键上建立聚集索引的。 
<BR>　　通常，我们会在每个表中都建立一个ID列，以区分每条数据，并且这个ID列是自动增大的，步长一般为1。我们的这个办公自动化的实例中的列Gid就是如此。此时，如果我们将这个列设为主键，SQL 
SERVER会将此列默认为聚集索引。这样做有好处，就是可以让您的数据在数据库中按照ID进行物理排序，但笔者认为这样做意义不大。 
<BR>　　显而易见，聚集索引的优势是很明显的，而每个表中只能有一个聚集索引的规则，这使得聚集索引变得更加珍贵。 
<BR>　　从我们前面谈到的聚集索引的定义我们可以看出，使用聚集索引的最大好处就是能够根据查询要求，迅速缩小查询范围，避免全表扫描。在实际应用中，因为ID号是自动生成的，我们并不知道每条记录的ID号，所以我们很难在实践中用ID号来进行查询。这就使让ID号这个主键作为聚集索引成为一种资源浪费。其次，让每个ID号都不同的字段作为聚集索引也不符合“大数目的不同值情况下不应建立聚合索引”规则；当然，这种情况只是针对用户经常修改记录内容，特别是索引项的时候会负作用，但对于查询速度并没有影响。 
<BR>　　在办公自动化系统中，无论是系统首页显示的需要用户签收的文件、会议还是用户进行文件查询等任何情况下进行数据查询都离不开字段的是“日期”还有用户本身的“用户名”。 
<BR>　　通常，办公自动化的首页会显示每个用户尚未签收的文件或会议。虽然我们的where语句可以仅仅限制当前用户尚未签收的情况，但如果您的系统已建立了很长时间，并且数据量很大，那么，每次每个用户打开首页的时候都进行一次全表扫描，这样做意义是不大的，绝大多数的用户1个月前的文件都已经浏览过了，这样做只能徒增数据库的开销而已。事实上，我们完全可以让用户打开系统首页时，数据库仅仅查询这个用户近3个月来未阅览的文件，通过“日期”这个字段来限制表扫描，提高查询速度。如果您的办公自动化系统已经建立的2年，那么您的首页显示速度理论上将是原来速度8倍，甚至更快。 
<BR>　　在这里之所以提到“理论上”三字，是因为如果您的聚集索引还是盲目地建在ID这个主键上时，您的查询速度是没有这么高的，即使您在“日期”这个字段上建立的索引（非聚合索引）。下面我们就来看一下在1000万条数据量的情况下各种查询的速度表现（3个月内的数据为25万条）： 
<BR><BR>（1）仅在主键上建立聚集索引，并且不划分时间段： </P><PRE>Select gid,fariqi,neibuyonghu,title from tgongwen</PRE>
<P>用时：128470毫秒（即：128秒） <BR><BR>（2）在主键上建立聚集索引，在fariq上建立非聚集索引： </P><PRE>select gid,fariqi,neibuyonghu,title from Tgongwen
where fariqi&gt; dateadd(day,-90,getdate())</PRE>
<P>用时：53763毫秒（54秒） <BR><BR>（3）将聚合索引建立在日期列（fariqi）上： </P><PRE>select gid,fariqi,neibuyonghu,title from Tgongwen
where fariqi&gt; dateadd(day,-90,getdate())</PRE>
<P>用时：2423毫秒（2秒） 
<BR><BR>　　虽然每条语句提取出来的都是25万条数据，各种情况的差异却是巨大的，特别是将聚集索引建立在日期列时的差异。事实上，如果您的数据库真的有1000万容量的话，把主键建立在ID列上，就像以上的第1、2种情况，在网页上的表现就是超时，根本就无法显示。这也是我摒弃ID列作为聚集索引的一个最重要的因素。得出以上速度的方法是：在各个select语句前加： 
</P><PRE>declare @d datetime
set @d=getdate()</PRE>
<P>并在select语句后加：</P><PRE>select [语句执行花费时间(毫秒)]=datediff(ms,@d,getdate())</PRE>
<P><SPAN style="color: red;">2、只要建立索引就能显著提高查询速度 
（错）</SPAN><BR>　　事实上，我们可以发现上面的例子中，第2、3条语句完全相同，且建立索引的字段也相同；不同的仅是前者在fariqi字段上建立的是非聚合索引，后者在此字段上建立的是聚合索引，但查询速度却有着天壤之别。所以，并非是在任何字段上简单地建立索引就能提高查询速度。 
<BR>　　从建表的语句中，我们可以看到这个有着1000万数据的表中fariqi字段有5003个不同记录。在此字段上建立聚合索引是再合适不过了。在现实中，我们每天都会发几个文件，这几个文件的发文日期就相同，这完全符合建立聚集索引要求的：“既不能绝大多数都相同，又不能只有极少数相同”的规则。由此看来，我们建立“适当”的聚合索引对于我们提高查询速度是非常重要的。 
<BR><BR><SPAN style="color: red;">3、把所有需要提高查询速度的字段都加进聚集索引，以提高查询速度 
（错）</SPAN><BR>　　上面已经谈到：在进行数据查询时都离不开字段的是“日期”还有用户本身的“用户名”。既然这两个字段都是如此的重要，我们可以把他们合并起来，建立一个复合索引（compound 
index）。 
<BR>　　很多人认为只要把任何字段加进聚集索引，就能提高查询速度，也有人感到迷惑：如果把复合的聚集索引字段分开查询，那么查询速度会减慢吗？带着这个问题，我们来看一下以下的查询速度（结果集都是25万条数据）：（日期列fariqi首先排在复合聚集索引的起始列，用户名neibuyonghu排在后列）： 
</P><PRE>（1）select gid,fariqi,neibuyonghu,title from Tgongwen where fariqi&gt;''2004-5-5'' </PRE>
<P>查询速度：2513毫秒</P><PRE>（2）select gid,fariqi,neibuyonghu,title from Tgongwen 
　　　　　　　　　　　　where fariqi&gt;''2004-5-5'' and neibuyonghu=''办公室''</PRE>
<P>查询速度：2516毫秒</P><PRE>（3）select gid,fariqi,neibuyonghu,title from Tgongwen where neibuyonghu=''办公室''</PRE>
<P>查询速度：60280毫秒 
<BR><BR>　　从以上试验中，我们可以看到如果仅用聚集索引的起始列作为查询条件和同时用到复合聚集索引的全部列的查询速度是几乎一样的，甚至比用上全部的复合索引列还要略快（在查询结果集数目一样的情况下）；而如果仅用复合聚集索引的非起始列作为查询条件的话，这个索引是不起任何作用的。当然，语句1、2的查询速度一样是因为查询的条目数一样，如果复合索引的所有列都用上，而且查询结果少的话，这样就会形成“索引覆盖”，因而性能可以达到最优。同时，请记住：无论您是否经常使用聚合索引的其他列，但其前导列一定要是使用最频繁的列。 
</P>
<P><SPAN 
style="color: red;">复合聚集索引只有主引导列在的查询条件中才会有效果</SPAN><BR><BR><STRONG>四、其他书上没有的索引使用经验总结</STRONG> 
<BR><BR><SPAN style="color: red;">1、用聚合索引比用不是聚合索引的主键速度快 
</SPAN><BR>　　下面是实例语句：（都是提取25万条数据） </P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=''2004-9-16''</PRE>
<P>使用时间：3326毫秒</P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen where gid&lt;=250000</PRE>
<P>使用时间：4470毫秒 <BR><BR>这里，用聚合索引比用不是聚合索引的主键速度快了近1/4。 <BR><BR><SPAN style="color: red;">2、用聚合索引比用一般的主键作order 
by时速度快，特别是在小数据量情况下 </SPAN></P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen order by fariqi</PRE>
<P>用时：12936</P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen order by gid</PRE>
<P>用时：18843 <BR><BR>　　这里，用聚合索引比用一般的主键作order 
by时，速度快了3/10。事实上，如果数据量很小的话，用聚集索引作为排序列要比使用非聚集索引速度快得明显的多；而数据量如果很大的话，如10万以上，则二者的速度差别不明显。 
<BR><BR>3、使用聚合索引内的时间段，搜索时间会按数据占整个数据表的百分比成比例减少，而无论聚合索引使用了多少个： </P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi&gt;''2004-1-1''</PRE>
<P>用时：6343毫秒（提取100万条） </P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi&gt;''2004-6-6''</PRE>
<P>用时：3170毫秒（提取50万条）</P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=''2004-9-16''</PRE>
<P>用时：3326毫秒（和上句的结果一模一样。如果采集的数量一样，那么用大于号和等于号是一样的）</P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen 
　　　　　　　　　　　　where fariqi&gt;''2004-1-1'' and fariqi&lt;''2004-6-6''</PRE>
<P>用时：3280毫秒 <BR><BR>4、日期列不会因为有分秒的输入而减慢查询速度 
<BR>　　下面的例子中，共有100万条数据，2004年1月1日以后的数据有50万条，但只有两个不同的日期，日期精确到日；之前有数据50万条，有5000个不同的日期，日期精确到秒。 
</P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen 
　　　　　　　　　　where fariqi&gt;''2004-1-1'' order by fariqi</PRE>
<P>用时：6390毫秒</P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen 
　　　　　　　　　　　　where fariqi&lt;''2004-1-1'' order by fariqi</PRE>
<P>用时：6453毫秒 <BR><BR><STRONG>五、其他注意事项</STRONG> 
<BR><BR>　　“水可载舟，亦可覆舟”，索引也一样。索引有助于提高检索性能，但过多或不当的索引也会导致系统低效。因为用户在表中每加进一个索引，数据库就要做更多的工作。过多的索引甚至会导致索引碎片。 
<BR>　　所以说，我们要建立一个“适当”的索引体系，特别是对聚合索引的创建，更应精益求精，以使您的数据库能得到高性能的发挥。 
<BR>　　当然，在实践中，作为一个尽职的数据库管理员，您还要多测试一些方案，找出哪种方案效率最高、最为有效。 </P>
<P>&nbsp;</P>
<P>&nbsp;</P>
<P><STRONG style="color: red;">改善SQL语句</STRONG><SPAN style="color: red;"> 
</SPAN><BR><BR>　　很多人不知道SQL语句在SQL SERVER中是如何执行的，他们担心自己所写的SQL语句会被SQL SERVER误解。比如： 
</P><PRE>select * from table1 where name=''zhangsan'' and tID &gt; 10000</PRE>
<P>和执行:</P><PRE>select * from table1 where tID &gt; 10000 and name=''zhangsan''</PRE>
<P>　　一些人不知道以上两条语句的执行效率是否一样，因为如果简单的从语句先后上看，这两个语句的确是不一样，如果tID是一个聚合索引，那么后一句仅仅从表的10000条以后的记录中查找就行了；而前一句则要先从全表中查找看有几个name=''zhangsan''的，而后再根据限制条件条件tID&gt;10000来提出查询结果。 
<BR>　　事实上，这样的担心是不必要的。SQL 
SERVER中有一个“查询分析优化器”，它可以计算出where子句中的搜索条件并确定哪个索引能缩小表扫描的搜索空间，也就是说，它能实现自动优化。 
<BR>　　虽然查询优化器可以根据where子句自动的进行查询优化，但大家仍然有必要了解一下“查询优化器”的工作原理，如非这样，有时查询优化器就会不按照您的本意进行快速查询。 
<BR>　　在查询分析阶段，查询优化器查看查询的每个阶段并决定限制需要扫描的数据量是否有用。如果一个阶段可以被用作一个扫描参数（SARG），那么就称之为可优化的，并且可以利用索引快速获得所需数据。 
<BR>　　SARG的定义：用于限制搜索的一个操作，因为它通常是指一个特定的匹配，一个值得范围内的匹配或者两个以上条件的AND连接。形式如下： </P><PRE>列名 操作符 &lt;常数 或 变量&gt;

或

&lt;常数 或 变量&gt; 操作符列名</PRE>
<P>列名可以出现在操作符的一边，而常数或变量出现在操作符的另一边。如：</P><PRE>Name=’张三’

价格&gt;5000

5000&lt;价格

Name=’张三’ and 价格&gt;5000</PRE>
<P>　　如果一个表达式不能满足SARG的形式，那它就无法限制搜索的范围了，也就是SQL 
SERVER必须对每一行都判断它是否满足WHERE子句中的所有条件。所以一个索引对于不满足SARG形式的表达式来说是无用的。 
<BR>　　介绍完SARG后，我们来总结一下使用SARG以及在实践中遇到的和某些资料上结论不同的经验： 
<BR><BR>1、Like语句是否属于SARG取决于所使用的通配符的类型 </P><PRE>如：name like ‘张%’ ，这就属于SARG

而：name like ‘%张’ ,就不属于SARG。</PRE>
<P>原因是通配符%在字符串的开通使得索引无法使用。 <BR><BR>2、or 会引起全表扫描 <BR>　　Name=’张三’ and 价格&gt;5000 
符号SARG，而：Name=’张三’ or 价格&gt;5000 则不符合SARG。使用or会引起全表扫描。 
<BR><BR>3、非操作符、函数引起的不满足SARG形式的语句 
<BR>　　不满足SARG形式的语句最典型的情况就是包括非操作符的语句，如：NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT EXISTS、NOT 
IN、NOT LIKE等，另外还有函数。下面就是几个不满足SARG形式的例子： </P><PRE>ABS(价格)&lt;5000

Name like ‘%三’

有些表达式，如：

WHERE 价格*2&gt;5000

SQL SERVER也会认为是SARG，SQL SERVER会将此式转化为：
WHERE 价格&gt;2500/2</PRE>
<P>但我们不推荐这样使用，因为有时SQL SERVER不能保证这种转化与原始表达式是完全等价的。 <BR><BR>4、IN 的作用相当与OR 
<BR><BR>语句： </P><PRE>Select * from table1 where tid in (2,3)

和

Select * from table1 where tid=2 or tid=3</PRE>
<P>是一样的，都会引起全表扫描，如果tid上有索引，其索引也会失效。 <BR><BR>5、尽量少用NOT <BR><BR>6、exists 和 in 
的执行效率是一样的 <BR>　　很多资料上都显示说，exists要比in的执行效率要高，同时应尽可能的用not exists来代替not 
in。但事实上，我试验了一下，发现二者无论是前面带不带not，二者之间的执行效率都是一样的。因为涉及子查询，我们试验这次用SQL 
SERVER自带的pubs数据库。运行前我们可以把SQL SERVER的statistics I/O状态打开： </P><PRE>（1）select title,price from titles where title_id in (select title_id from sales where qty&gt;30)</PRE>
<P>该句的执行结果为： <BR><BR>表 ''sales''。扫描计数 18，逻辑读 56 次，物理读 0 次，预读 0 次。 <BR>表 
''titles''。扫描计数 1，逻辑读 2 次，物理读 0 次，预读 0 次。 </P><PRE>（2）select title,price from titles 
　　　　　　　where exists (select * from sales 
　　　　　　　where sales.title_id=titles.title_id and qty&gt;30)</PRE>
<P>第二句的执行结果为： <BR><BR>表 ''sales''。扫描计数 18，逻辑读 56 次，物理读 0 次，预读 0 次。 <BR>表 
''titles''。扫描计数 1，逻辑读 2 次，物理读 0 次，预读 0 次。 <BR><BR>我们从此可以看到用exists和用in的执行效率是一样的。 
<BR><BR>7、用函数charindex()和前面加通配符%的LIKE执行效率一样 
<BR>　　前面，我们谈到，如果在LIKE前面加上通配符%，那么将会引起全表扫描，所以其执行效率是低下的。但有的资料介绍说，用函数charindex()来代替LIKE速度会有大的提升，经我试验，发现这种说明也是错误的： 
<BR>　 </P><PRE>select gid,title,fariqi,reader from tgongwen 
　　　　　　　　　where charindex(''刑侦支队'',reader)&gt;0 and fariqi&gt;''2004-5-5''</PRE>
<P>用时：7秒，另外：扫描计数 4，逻辑读 7155 次，物理读 0 次，预读 0 次。</P><PRE>select gid,title,fariqi,reader from tgongwen 
　　　　　　　　　where reader like ''%'' + ''刑侦支队'' + ''%'' and fariqi&gt;''2004-5-5''</PRE>
<P>用时：7秒，另外：扫描计数 4，逻辑读 7155 次，物理读 0 次，预读 0 次。 <BR><BR>8、union并不绝对比or的执行效率高 
<BR>　　我们前面已经谈到了在where子句中使用or会引起全表扫描，一般的，我所见过的资料都是推荐这里用union来代替or。事实证明，这种说法对于大部分都是适用的。 
</P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen 
　　　　　　　　　　where fariqi=''2004-9-16'' or gid&gt;9990000</PRE>
<P>用时：68秒。扫描计数 1，逻辑读 404008 次，物理读 283 次，预读 392163 次。</P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=''2004-9-16'' 
union
select gid,fariqi,neibuyonghu,reader,title from Tgongwen where gid&gt;9990000</PRE>
<P>用时：9秒。扫描计数 8，逻辑读 67489 次，物理读 216 次，预读 7499 次。 
<BR><BR>看来，用union在通常情况下比用or的效率要高的多。 
<BR><BR>　　但经过试验，笔者发现如果or两边的查询列是一样的话，那么用union则反倒和用or的执行速度差很多，虽然这里union扫描的是索引，而or扫描的是全表。 
<BR>　 </P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen 
　　　　　　　　　　where fariqi=''2004-9-16'' or fariqi=''2004-2-5''</PRE>
<P>用时：6423毫秒。扫描计数 2，逻辑读 14726 次，物理读 1 次，预读 7176 次。</P><PRE>select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=''2004-9-16'' 
union
select gid,fariqi,neibuyonghu,reader,title from Tgongwen where fariqi=''2004-2-5''</PRE>
<P>用时：11640毫秒。扫描计数 8，逻辑读 14806 次，物理读 108 次，预读 1144 次。 
<BR><BR>9、字段提取要按照“需多少、提多少”的原则，避免“select *” <BR>　　我们来做一个试验： </P><PRE>select top 10000 gid,fariqi,reader,title from tgongwen order by gid desc</PRE>
<P>用时：4673毫秒</P><PRE>select top 10000 gid,fariqi,title from tgongwen order by gid desc</PRE>
<P>用时：1376毫秒</P><PRE>select top 10000 gid,fariqi from tgongwen order by gid desc</PRE>
<P>用时：80毫秒 <BR><BR>　　由此看来，我们每少提取一个字段，数据的提取速度就会有相应的提升。提升的速度还要看您舍弃的字段的大小来判断。 
<BR><BR>10、count(*)不比count(字段)慢 
<BR>　　某些资料上说：用*会统计所有列，显然要比一个世界的列名效率低。这种说法其实是没有根据的。我们来看： </P><PRE>select count(*) from Tgongwen</PRE>
<P>用时：1500毫秒</P><PRE>select count(gid) from Tgongwen </PRE>
<P>用时：1483毫秒</P><PRE>select count(fariqi) from Tgongwen</PRE>
<P>用时：3140毫秒</P><PRE>select count(title) from Tgongwen</PRE>
<P>用时：52050毫秒 
<BR><BR>　　从以上可以看出，如果用count(*)和用count(主键)的速度是相当的，而count(*)却比其他任何除主键以外的字段汇总速度要快，而且字段越长，汇总的速度就越慢。我想，如果用count(*)， 
SQL SERVER可能会自动查找最小字段来汇总的。当然，如果您直接写count(主键)将会来的更直接些。 <BR><BR>11、order 
by按聚集索引列排序效率最高 <BR>　　我们来看：（gid是主键，fariqi是聚合索引列）： </P><PRE>select top 10000 gid,fariqi,reader,title from tgongwen</PRE>
<P>用时：196 毫秒。 扫描计数 1，逻辑读 289 次，物理读 1 次，预读 1527 次。</P><PRE>select top 10000 gid,fariqi,reader,title from tgongwen order by gid asc</PRE>
<P>用时：4720毫秒。 扫描计数 1，逻辑读 41956 次，物理读 0 次，预读 1287 次。</P><PRE>select top 10000 gid,fariqi,reader,title from tgongwen order by gid desc</PRE>
<P>用时：4736毫秒。 扫描计数 1，逻辑读 55350 次，物理读 10 次，预读 775 次。</P><PRE>select top 10000 gid,fariqi,reader,title from tgongwen order by fariqi asc</PRE>
<P>用时：173毫秒。 扫描计数 1，逻辑读 290 次，物理读 0 次，预读 0 次。</P><PRE>select top 10000 gid,fariqi,reader,title from tgongwen order by fariqi desc</PRE>
<P>用时：156毫秒。 扫描计数 1，逻辑读 289 次，物理读 0 次，预读 0 次。 
<BR><BR>　　从以上我们可以看出，不排序的速度以及逻辑读次数都是和“order by 聚集索引列” 的速度是相当的，但这些都比“order by 
非聚集索引列”的查询速度是快得多的。 <BR>　　同时，按照某个字段进行排序的时候，无论是正序还是倒序，速度是基本相当的。 <BR><BR>12、高效的TOP 
<BR>　　事实上，在查询和提取超大容量的数据集时，影响数据库响应时间的最大因素不是数据查找，而是物理的I/0操作。如： </P><PRE>select top 10 * from (
select top 10000 gid,fariqi,title from tgongwen
where neibuyonghu=''办公室''
order by gid desc) as a
order by gid asc</PRE>
<P>　　这条语句，从理论上讲，整条语句的执行时间应该比子句的执行时间长，但事实相反。因为，子句执行后返回的是10000条记录，而整条语句仅返回10条语句，所以影响数据库响应时间最大的因素是物理I/O操作。而限制物理I/O操作此处的最有效方法之一就是使用TOP关键词了。TOP关键词是SQL 
SERVER中经过系统优化过的一个用来提取前几条或前几个百分比数据的词。经笔者在实践中的应用，发现TOP确实很好用，效率也很高。但这个词在另外一个大型数据库ORACLE中却没有，这不能说不是一个遗憾，虽然在ORACLE中可以用其他方法（如：rownumber）来解决。在以后的关于“实现千万级数据的分页显示存储过程”的讨论中，我们就将用到TOP这个关键词。 
<BR>　　到此为止，我们上面讨论了如何实现从大容量的数据库中快速地查询出您所需要的数据方法。当然，我们介绍的这些方法都是“软”方法，在实践中，我们还要考虑各种“硬”因素，如：网络性能、服务器的性能、操作系统的性能，甚至网卡、交换机等。 
</P>
<P><BR>&nbsp;</P>
<P><BR>&nbsp;</P></DIV>
<DIV id="MySignature"></DIV>
<SCRIPT type="text/javascript">
var isLogined = false;
var cb_blogId = 41698;
var cb_entryId = 1594964;
var cb_blogApp = currentBlogApp;
var cb_blogUserGuid = "294c420b-63cf-dd11-9e4d-001cf0cd104b";
var cb_entryCreatedDate = '2009/11/3 9:26:00';
var enableGoogleAd = true;
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
</SCRIPT>

<DIV id="blog_post_info_block">
<DIV id="blog_post_info"></DIV>
<DIV class="clear"></DIV>
<DIV id="post_next_prev"></DIV></DIV>
<SCRIPT type="text/javascript">
    //SyntaxHighlighter.config.strings.expandSource = '<span><img src="http://static.cnblogs.com/images/expand-code.gif" alt="" class="expand-code-icon"/>View Code</span>';
    $(function () {             
        fixPostBodyFormat();
        loadAdUnderPost();
        loadBlogSignature();
        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);        
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);        
    });
</SCRIPT>
</DIV>
<DIV class="postDesc">posted @ <SPAN id="post-date">2009-11-03 09:26</SPAN> <A 
href="http://www.cnblogs.com/aaa6818162/">awp110</A> 阅读(54) 评论(<SPAN id="post-comment-count">0</SPAN>) 
 <A href="http://www.cnblogs.com/aaa6818162/admin/EditPosts.aspx?postid=1594964" 
rel="nofollow">编辑</A> <A onclick="AddToWz(1594964);return false;" href="http://www.cnblogs.com/aaa6818162/archive/2009/11/03/1594964.html#">收藏</A></DIV></DIV><IMG 
alt="" src="sql索引学习总结%20-%20awp110%20-%20博客园_files/1594964.jpg" width="1" 
height="1"></DIV><!--end: topics 文章、评论容器-->
<DIV id="blog-comments-placeholder"></DIV>
<SCRIPT type="text/javascript">var commentManager = new blogCommentManager();commentManager.loadComments();</SCRIPT>

<DIV id="comment_form" class="commentform">
<DIV id="divCommentShow"></DIV>
<DIV id="comment_nav"><SPAN id="span_refresh_tips"></SPAN><A id="lnk_RefreshComments" 
onclick="return RefreshCommentList();" href="javascript:void(0);">刷新评论</A><A 
onclick="return RefreshPage();" href="http://www.cnblogs.com/aaa6818162/archive/2009/11/03/1594964.html#">刷新页面</A><A 
href="http://www.cnblogs.com/aaa6818162/archive/2009/11/03/1594964.html#top">返回顶部</A></DIV>
<DIV id="comment_form_container"></DIV>
<SCRIPT type="text/javascript">if (typeof commentManager === 'undefined') {
        commentManager = new blogCommentManager();
    }
    commentManager.loadCommentForm();   
</SCRIPT>

<DIV id="ad_text_under_commentbox" class="ad_text_commentbox"></DIV>
<DIV id="site_nav_under"><A title="程序员的网上家园" href="http://www.cnblogs.com/" 
target="_blank">博客园首页</A><A title="程序员问答社区" href="http://q.cnblogs.com/" target="_blank">博问</A><A 
title="IT新闻" href="http://news.cnblogs.com/" target="_blank">新闻</A><A href="http://home.cnblogs.com/ing/" 
target="_blank">闪存</A><A href="http://job.cnblogs.com/" 
target="_blank">程序员招聘</A><A href="http://kb.cnblogs.com/" 
target="_blank">知识库</A></DIV>
<DIV id="ad_under_post_holder"></DIV>
<DIV id="HistoryToday" class="c_ad_block"></DIV>
</DIV></DIV><!--end: forFlow --></DIV><!--end: mainContent 主体内容容器-->
<DIV id="sideBar">
<DIV id="sideBarMain"><!--done-->
<DIV class="newsItem">
<H3 class="catListTitle">公告</H3>
<DIV id="blog-news"></DIV></DIV>
<DIV id="calendar">
<DIV style="displya: none;" id="blog-calendar"></DIV></DIV>
<DIV id="leftcontentcontainer">
<DIV id="blog-sidecolumn"></DIV></DIV></DIV><!--end: sideBarMain --></DIV><!--end: sideBar 侧边栏容器 -->
<DIV class="clear"></DIV></DIV><!--end: main -->
<DIV class="clear"></DIV>
<DIV id="footer"><!--done--> Copyright ©2012 awp110	</DIV><!--end: footer -->
</DIV><!--end: home 自定义的最大容器 -->
<SCRIPT type="text/javascript" src="sql索引学习总结%20-%20awp110%20-%20博客园_files/google-analytics.js"></SCRIPT>
</BODY></HTML>
